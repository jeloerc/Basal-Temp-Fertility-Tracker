<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Basal Temperature Tracking</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <!-- ECharts JS -->
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
o   <div class="container"
        <header class="py-4 text-center">
            <h1 class="display-4">Basal Temperature Tracker</h1>
            <p class="lead">Monitor your menstrual cycle and fertility</p>
        </header>

        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4 rounded">
            <div class="container-fluid">
                <a class="navbar-brand" href="{{ url_for('index') }}">
                    <i class="fas fa-thermometer-half"></i> BBT Tracker
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link active" href="{{ url_for('index') }}" aria-current="page">
                                <i class="fas fa-home"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('history') }}">
                                <i class="fas fa-history"></i> History
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('cycles') }}">
                                <i class="fas fa-sync-alt"></i> Cycles
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('settings') }}">
                                <i class="fas fa-cog"></i> Settings
                            </a>
                        </li>
                    </ul>
                    <div class="ms-auto d-flex align-items-center">
                        <span class="badge bg-primary me-2">Day {{ day_counter }}</span>
                        <form action="{{ url_for('sync_cycle') }}" method="post" class="me-2">
                            <button type="submit" class="btn btn-sm btn-outline-primary" title="Synchronize cycle data">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </form>
                        <form action="{{ url_for('fix_cycle_days') }}" method="post" class="me-2">
                            <button type="submit" class="btn btn-sm btn-outline-warning" title="Fix cycle days">
                                <i class="fas fa-calendar-check"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </nav>

        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-primary text-white">
                        <h2 class="h5 mb-0">Record Temperature</h2>
                    </div>
                    <div class="card-body">
                        {% with messages = get_flashed_messages(with_categories=true) %}
                            {% if messages %}
                                {% for category, message in messages %}
                                    <div class="alert alert-{{ 'success' if category == 'success' else 'danger' }}" role="alert">
                                        {{ message }}
                                    </div>
                                {% endfor %}
                            {% endif %}
                        {% endwith %}

                        <form action="{{ url_for('add_temp') }}" method="post">
                            <div class="mb-3">
                                <label for="temperature" class="form-label">Basal Temperature for Day {{ day_counter }}</label>
                                <div class="input-group">
                                    <input type="number" step="0.01" class="form-control" id="temperature" name="temperature" required placeholder="Ex. 98.6">
                                    <span class="input-group-text">°F</span>
                                </div>
                                <div class="form-text">Enter your basal temperature measured upon waking.</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="date" class="form-label">Date (Optional)</label>
                                <input type="date" class="form-control" id="date" name="date" value="{{ current_date }}">
                                <div class="form-text">If left blank, today's date will be used.</div>
                            </div>
                            
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="is_period" name="is_period" value="true">
                                <label class="form-check-label" for="is_period">Mark as period day (will reset cycle)</label>
                            </div>
                            
                            <div class="mb-3">
                                <label for="mucus_type" class="form-label">Cervical Mucus</label>
                                <select class="form-select" id="mucus_type" name="mucus_type">
                                    <option value="">Select type</option>
                                    <option value="dry">Dry</option>
                                    <option value="sticky">Sticky</option>
                                    <option value="creamy">Creamy</option>
                                    <option value="egg white">Egg white</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label for="mood" class="form-label">Mood</label>
                                <select class="form-select" id="mood" name="mood">
                                    <option value="">Select mood</option>
                                    <option value="happy">Happy</option>
                                    <option value="neutral">Neutral</option>
                                    <option value="sad">Sad</option>
                                    <option value="irritable">Irritable</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label for="comment" class="form-label">Notes</label>
                                <textarea class="form-control" id="comment" name="comment" rows="3" placeholder="Add any additional notes here..."></textarea>
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Record</button>
                        </form>
                        
                        <hr>
                        
                        <form action="{{ url_for('reset_cycle') }}" method="post" class="mt-3">
                            <div class="d-grid">
                                <button type="submit" class="btn btn-outline-danger">Start New Cycle</button>
                            </div>
                            <div class="form-text text-center">Press this button at the start of your menstrual period</div>
                        </form>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-info text-white">
                        <h2 class="h5 mb-0">Cycle Analysis</h2>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h3 class="h6">Average Basal Temperature:</h3>
                            <p class="display-6 text-center">{{ "%.2f"|format(analysis.average_temp) }}°F</p>
                        </div>
                        
                        {% if current_cycle_data %}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <h3 class="h6">Current Cycle Data:</h3>
                                    <div class="list-group">
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Cycle Day:</span>
                                            <span class="badge bg-primary rounded-pill">{{ day_counter }}</span>
                                        </div>
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Follicular Avg:</span>
                                            <span class="badge bg-info rounded-pill">97.50°F</span>
                                        </div>
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Luteal Avg:</span>
                                            <span class="badge bg-success rounded-pill">98.10°F</span>
                                        </div>
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Temp Shift:</span>
                                            <span class="badge bg-warning rounded-pill">0.60°F</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {% else %}
                        <div class="row">
                            <div class="col-md-12">
                                <div class="mb-3">
                                    <p class="text-center text-muted">To see a detailed analysis of your cycle, visit the <a href="{{ url_for('history') }}">History</a> or <a href="{{ url_for('cycles') }}">Cycles</a> section.</p>
                                </div>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12 mb-4">
                <div class="card">
                    <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                        <h2 class="h5 mb-0">Current Cycle Chart</h2>
                        <span class="badge bg-light text-dark">
                            Day {{ day_counter }}
                        </span>
                    </div>
                    <div class="card-body text-center">
                        {% if current_cycle_data %}
                            <div id="current-cycle-chart" style="width: 100%; height: 400px;"></div>
                        {% else %}
                            <p class="text-muted">No data available for the current cycle</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12 mb-4">
                <div class="card">
                    <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                        <h2 class="h5 mb-0">Historical Temperature Chart</h2>
                        <div class="d-flex align-items-center">
                            <div class="input-group input-group-sm me-2" style="max-width: 350px;">
                                <label class="input-group-text" for="cycle-selector">Cycle</label>
                                <select class="form-select form-select-sm" id="cycle-selector">
                                    <option value="current">Current Cycle</option>
                                    <option value="all">All Cycles Combined</option>
                                    {% if cycle_records %}
                                        <optgroup label="Previous Cycles">
                                        {% for record in cycle_records %}
                                            <option value="{{ record.id }}">
                                                {{ record.start_date }} to {{ record.end_date }} ({{ record.duration }} days)
                                            </option>
                                        {% endfor %}
                                        </optgroup>
                                    {% endif %}
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body text-center">
                        {% if chart_data %}
                            <div id="temperature-chart" style="width: 100%; height: 400px;"></div>
                        {% else %}
                            <p class="text-muted">Not enough data to display chart</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <footer class="py-3 text-center text-muted">
            <div class="container">
                <p>© 2025 Basal Temperature Tracker</p>
                <p class="small">This application is for informational purposes at JJhome</p>
            </div>
        </footer>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    
    {% if chart_data %}
    <script>
        // Initialize chart data for the cycle chart
        window.initialChartData = {{ chart_data|safe }};
    </script>
    <script src="{{ url_for('static', filename='js/cycle-chart.js') }}"></script>
    {% endif %}

    {% if current_cycle_data %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            try {
                // Initialize Current Cycle Chart
                var currentCycleData = {{ current_cycle_data|safe }};
                console.log("Current cycle data:", currentCycleData);
                
                // Ensure all temperatures have exactly 2 decimal places
                if (currentCycleData && currentCycleData.temperatures) {
                    currentCycleData.temperatures = currentCycleData.temperatures.map(function(temp) {
                        return parseFloat(temp.toFixed(2));
                    });
                }
                
                var currentChartDom = document.getElementById('current-cycle-chart');
                var currentChart = echarts.init(currentChartDom);
                
                // Format dates for tooltips
                var formattedDates = {};
                if (currentCycleData.dates && Array.isArray(currentCycleData.dates)) {
                    currentCycleData.dates.forEach(function(date, index) {
                        formattedDates[currentCycleData.days[index]] = date;
                    });
                }
                
                // Identify period days for visual markers
                var periodDays = [];
                if (currentCycleData.isPeriod && Array.isArray(currentCycleData.isPeriod)) {
                    currentCycleData.isPeriod.forEach(function(isPeriod, index) {
                        if (isPeriod) {
                            periodDays.push(currentCycleData.days[index]);
                        }
                    });
                }
                
                // Ensure we have default values if properties are missing
                var follicularAvg = currentCycleData.follicularAvg || 97.5;
                var lutealAvg = currentCycleData.lutealAvg || 98.1;
                var minTemp = currentCycleData.minTemp || 97.0;
                var maxTemp = currentCycleData.maxTemp || 99.0;
                
                // Prepare fertile window data
                var fertileAreaData = [];
                if (currentCycleData.fertileDays && currentCycleData.fertileDays.length > 1) {
                    var minFertileDay = Math.min.apply(null, currentCycleData.fertileDays);
                    var maxFertileDay = Math.max.apply(null, currentCycleData.fertileDays);
                    
                    fertileAreaData = [
                        [
                            {
                                name: 'Fertile Window',
                                xAxis: minFertileDay,
                                itemStyle: { opacity: 0.25, color: '#ff4081' }
                            },
                            {
                                xAxis: maxFertileDay
                            }
                        ]
                    ];
                }
                
                // Visualization options for current cycle chart
                var currentOption = {
                    title: {
                        text: 'Current Cycle',
                        left: 'center',
                        subtext: 'Started on ' + (currentCycleData.dates ? currentCycleData.dates[0] : '')
                    },
                    tooltip: {
                        trigger: 'axis',
                        formatter: function(params) {
                            var dayNum = params[0].axisValue;
                            var date = formattedDates[dayNum] || '';
                            var isFertileDay = currentCycleData.fertileDays && currentCycleData.fertileDays.includes(parseInt(dayNum));
                            var isPeriodDay = periodDays.includes(parseInt(dayNum));
                            
                            var statusText = '';
                            if (isPeriodDay) statusText += ' (Period)';
                            if (isFertileDay) statusText += ' (Fertile)';
                            
                            return 'Date: ' + date + '<br/>Day ' + dayNum + ': ' + parseFloat(params[0].data).toFixed(2) + '°F' + statusText;
                        },
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: ['Temperature', 'Follicular Avg', 'Luteal Avg'],
                        bottom: 10
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '15%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                            dataZoom: {},
                            restore: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: currentCycleData.days || [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                        name: 'Cycle Day',
                        nameLocation: 'middle',
                        nameGap: 30,
                        axisLine: {
                            lineStyle: {
                                color: '#666'
                            }
                        },
                        axisLabel: {
                            formatter: function(value) {
                                // Get the date for this day
                                var date = formattedDates[value] || '';
                                // Show date in MM-DD format with period marker
                                return date ? 
                                    (date.substring(5) + (periodDays.includes(parseInt(value)) ? ' •' : '')) 
                                    : value;
                            },
                            rotate: 45,
                            interval: 'auto',
                            color: '#666'
                        },
                        splitLine: {
                            show: true,
                            lineStyle: {
                                color: 'rgba(0,0,0,0.05)'
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Temperature (°F)',
                        nameLocation: 'middle',
                        nameGap: 50,
                        min: minTemp,
                        max: maxTemp,
                        axisLine: {
                            lineStyle: {
                                color: '#666'
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                color: 'rgba(0,0,0,0.05)'
                            }
                        }
                    },
                    series: [
                        {
                            name: 'Temperature',
                            type: 'line',
                            smooth: true,
                            data: currentCycleData.temperatures || [],
                            markArea: {
                                silent: true,
                                itemStyle: {
                                    opacity: 0.25,
                                    color: '#ff4081'
                                },
                                data: fertileAreaData
                            },
                            markLine: {
                                silent: true,
                                data: periodDays.length ? [
                                    {
                                        xAxis: periodDays[0],
                                        name: 'Cycle Start',
                                        lineStyle: {
                                            color: '#e91e63',
                                            type: 'solid',
                                            width: 2
                                        },
                                        label: {
                                            formatter: 'Cycle Start',
                                            position: 'start'
                                        }
                                    }
                                ] : []
                            },
                            itemStyle: {
                                // Color points based on period
                                color: function(params) {
                                    var dayIndex = params.dataIndex;
                                    if (dayIndex !== undefined) {
                                        var day = currentCycleData.days[dayIndex];
                                        if (periodDays.includes(day)) {
                                            return '#e91e63'; // Period days
                                        }
                                    }
                                    return '#7c4dff'; // Regular days
                                },
                                borderWidth: 2,
                                borderColor: 'rgba(255,255,255,0.7)'
                            },
                            lineStyle: {
                                width: 3,
                                shadowColor: 'rgba(0,0,0,0.3)',
                                shadowBlur: 10,
                                shadowOffsetY: 5
                            },
                            symbol: 'circle',
                            symbolSize: 8,
                            emphasis: {
                                scale: 1.5
                            }
                        },
                        {
                            name: 'Follicular Avg',
                            type: 'line',
                            smooth: false,
                            data: Array(currentCycleData.days ? currentCycleData.days.length : 10).fill(follicularAvg),
                            lineStyle: {
                                width: 2,
                                type: 'dashed',
                                color: '#2196f3'
                            },
                            symbol: 'none'
                        },
                        {
                            name: 'Luteal Avg',
                            type: 'line',
                            smooth: false,
                            data: Array(currentCycleData.days ? currentCycleData.days.length : 10).fill(lutealAvg),
                            lineStyle: {
                                width: 2,
                                type: 'dashed',
                                color: '#4caf50'
                            },
                            symbol: 'none'
                        }
                    ]
                };
                
                // Add fertility analysis information if it exists
                if (currentCycleData.analysis) {
                    var analysisDiv = document.createElement('div');
                    analysisDiv.className = 'alert alert-info mt-3';
                    analysisDiv.innerHTML = '<strong>Fertility Analysis:</strong> ' + currentCycleData.analysis;
                    document.getElementById('current-cycle-chart').parentNode.appendChild(analysisDiv);
                }
                
                currentCycleData.series[0].markLine.data.push({
                    xAxis: 1,
                    name: 'Cycle Start',
                    lineStyle: {
                        color: '#e91e63',
                        type: 'solid',
                        width: 2
                    },
                    label: {
                        formatter: 'Cycle Start',
                        position: 'start'
                    }
                });
                
                currentChart.setOption(currentOption);
                
                // Make the current cycle chart responsive
                window.addEventListener('resize', function() {
                    currentChart.resize();
                });
            } catch (error) {
                console.error("Error initializing chart:", error);
                document.getElementById('current-cycle-chart').innerHTML = 
                    '<div class="alert alert-danger">Error loading chart: ' + error.message + '</div>';
            }
        });
    </script>
    {% endif %}

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Configuration for iOS devices
            const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            
            if (isIOS) {
                // Adjust element heights to avoid issues with iOS navigation bar
                document.body.classList.add('ios-device');
                
                // Prevent unwanted zoom on form fields
                document.querySelectorAll('input, select, textarea').forEach(el => {
                    el.style.fontSize = '16px';
                });
                
                // Improve scrolling in tables
                document.querySelectorAll('.table-responsive').forEach(table => {
                    table.style.WebkitOverflowScrolling = 'touch';
                });
                
                // Ensure chart cards are always expanded
                document.querySelectorAll('.card-body').forEach(cardBody => {
                    cardBody.style.maxHeight = 'none';
                    cardBody.style.overflow = 'visible';
                });
                
                // Adjust chart heights for better visualization
                document.querySelectorAll('[id$="-chart"]').forEach(chart => {
                    chart.style.height = '350px';
                });
            }
            
            // Make sure charts are responsive
            window.addEventListener('resize', function() {
                if (window.echarts) {
                    document.querySelectorAll('[id$="-chart"]').forEach(chartEl => {
                        const chart = echarts.getInstanceByDom(chartEl);
                        if (chart) {
                            chart.resize();
                        }
                    });
                }
            });
        });
    </script>

    <script>
        // Set today's date as the default value for the date input
        document.addEventListener('DOMContentLoaded', function() {
            var today = new Date();
            var year = today.getFullYear();
            var month = String(today.getMonth() + 1).padStart(2, '0');
            var day = String(today.getDate()).padStart(2, '0');
            
            var dateInput = document.getElementById('date');
            if (dateInput) {
                dateInput.value = year + '-' + month + '-' + day;
            }
        });
    </script>

    <script>
    // Function to initialize the current cycle chart
    function initCurrentCycleChart(cycleData) {
        if (!cycleData) {
            document.getElementById('current-cycle-chart').innerHTML = '<div class="alert alert-info">No data available for the current cycle</div>';
            return;
        }

        // Get current date to verify
        const today = new Date();
        const formattedToday = today.toISOString().split('T')[0];
        
        /* Commenting out automatic addition of today's date
        // Ensure current cycle includes today's date
        let includeCurrentDay = true;
        if (!cycleData.dates.includes(formattedToday)) {
            console.log("Adding current date to cycle graph");
            cycleData.dates.push(formattedToday);
            cycleData.days.push(cycleData.currentDay || cycleData.days.length + 1);
            // For temperature, use the last recorded value or an average
            const lastTemp = cycleData.temperatures[cycleData.temperatures.length - 1] || cycleData.avgTemp || 97.5;
            cycleData.temperatures.push(lastTemp);
        }
        */
        
        // Create current cycle chart options
        var currentCycleOptions = {
            title: {
                text: 'Current Cycle',
                subtext: 'Day ' + (cycleData.currentDay || '?') + ' of cycle',
                left: 'center'
            },
            tooltip: {
                trigger: 'axis',
                formatter: function(params) {
                    let tipContent = 'Day ' + params[0].value[0] + '<br>';
                    tipContent += 'Date: ' + cycleData.dates[params[0].dataIndex] + '<br>';
                    tipContent += 'Temperature: ' + parseFloat(params[0].value[1]).toFixed(2) + '°F<br>';
                    
                    // Show if it's a fertile day
                    if (cycleData.fertileDays.includes(params[0].value[0])) {
                        tipContent += '<span style="color:#e91e63">⚠️ Fertile Day</span><br>';
                    }
                    
                    // Show if it's a period day
                    if (cycleData.isPeriod && cycleData.isPeriod[params[0].dataIndex]) {
                        tipContent += '<span style="color:#e91e63">🔴 Period</span><br>';
                    }
                    
                    return tipContent;
                }
            },
            grid: {
                left: '3%',
                right: '4%',
                bottom: '3%',
                containLabel: true
            },
            toolbox: {
                feature: {
                    saveAsImage: { title: 'Save' },
                    restore: { title: 'Restore' },
                    dataZoom: { title: 'Zoom' }
                }
            },
            xAxis: {
                type: 'value',
                name: 'Cycle Day',
                min: 1,
                max: function(value) {
                    // Set maximum to current cycle day or max data + 3
                    return Math.max(value.max, cycleData.currentDay || 30, 30);
                },
                axisLabel: {
                    formatter: '{value}'
                }
            },
            yAxis: {
                type: 'value',
                name: 'Temperature (°F)',
                min: cycleData.minTemp || 96.5,
                max: cycleData.maxTemp || 99.0,
                axisLabel: {
                    formatter: '{value}°F'
                }
            },
            series: [
                {
                    name: 'Temperature',
                    type: 'line',
                    data: cycleData.days.map((day, index) => [day, cycleData.temperatures[index]]),
                    showSymbol: true,
                    symbolSize: 10,
                    lineStyle: {
                        width: 2,
                        shadowColor: 'rgba(0, 0, 0, 0.3)',
                        shadowBlur: 10,
                        shadowOffsetY: 8
                    },
                    itemStyle: {
                        color: function(params) {
                            if (cycleData.isPeriod && cycleData.isPeriod[params.dataIndex]) {
                                return '#e91e63'; // Pink color for period days
                            }
                            return '#7c4dff'; // Purple color for other days
                        },
                        borderWidth: 2,
                        borderColor: '#fff',
                        shadowColor: 'rgba(0, 0, 0, 0.5)',
                        shadowBlur: 5
                    },
                    markLine: {
                        silent: true,
                        lineStyle: {
                            color: '#e91e63',
                            type: 'solid',
                            width: 2
                        },
                        data: [
                            {
                                yAxis: parseFloat(document.getElementById('fertileThreshold').value) || 98.0,
                                name: 'Fertile Threshold'
                            }
                        ]
                    },
                    markArea: {
                        itemStyle: {
                            color: 'rgba(233, 30, 99, 0.25)'
                        },
                        data: getFertileWindowForChart(cycleData)
                    }
                }
            ]
        };
        
        // Add vertical line to mark cycle start (day 1)
        if (cycleData.days.includes(1)) {
            let dayOneIndex = cycleData.days.indexOf(1);
            let cycleStartDate = cycleData.dates[dayOneIndex];
            
            currentCycleOptions.title.subtext = 'Day ' + (cycleData.currentDay || '?') + ' (Start: ' + cycleStartDate + ')';
            
            currentCycleOptions.series[0].markLine.data.push({
                xAxis: 1,
                name: 'Cycle Start',
                lineStyle: {
                    color: '#e91e63',
                    type: 'solid',
                    width: 2
                },
                label: {
                    formatter: 'Cycle Start',
                    position: 'start'
                }
            });
        }
        
        // Initialize and display chart
        var currentCycleChart = echarts.init(document.getElementById('current-cycle-chart'));
        currentCycleChart.setOption(currentCycleOptions);
        
        // Respond to size changes
        window.addEventListener('resize', function() {
            currentCycleChart.resize();
        });
    }

    // Function to get the fertile window for the chart
    function getFertileWindowForChart(data) {
        // If no fertile days, return empty array
        if (!data.fertileDays || data.fertileDays.length < 1) {
            return [];
        }
        
        // Sort fertile days
        let fertileDays = [...data.fertileDays].sort((a, b) => a - b);
        
        // If only one fertile day, create small area around that day
        if (fertileDays.length === 1) {
            return [
                [
                    {xAxis: fertileDays[0] - 0.5},
                    {xAxis: fertileDays[0] + 0.5}
                ]
            ];
        }
        
        // For multiple fertile days, group consecutive days into areas
        let result = [];
        let start = fertileDays[0];
        let end = start;
        
        for (let i = 1; i < fertileDays.length; i++) {
            // If current day is consecutive to previous
            if (fertileDays[i] === end + 1) {
                end = fertileDays[i];
            } else {
                // If there's a gap, save current area and start a new one
                result.push([
                    {xAxis: start - 0.5},
                    {xAxis: end + 0.5}
                ]);
                start = fertileDays[i];
                end = start;
            }
        }
        
        // Add the last area
        result.push([
            {xAxis: start - 0.5},
            {xAxis: end + 0.5}
        ]);
        
        return result;
    }
    </script>
</body>
</html> 